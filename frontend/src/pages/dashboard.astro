---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Dashboard - Sistema Voluntariado">
  <!-- Navigation Bar -->
  <nav class="navbar">
    <div class="nav-container">
      <div class="nav-logo">
        <h2>Sistema Voluntariado</h2>
      </div>
      <div class="nav-links">
        <a href="/dashboard" class="nav-link active">Inicio</a>
        <a href="/dashboard/all-events" class="nav-link">Eventos</a>
        <a href="/dashboard/perfil" class="nav-link">Perfil</a>
        <button id="logout-btn" class="logout-nav-btn">Cerrar Sesión</button>
      </div>
    </div>
  </nav>

  <main class="main-content">
    <!-- Header Section -->
    <div class="dashboard-header">
      <div class="header-content">
        <h1 id="welcome-title" class="main-title">Bienvenido, Voluntario</h1>
        <p class="subtitle">Encuentra tu próximo evento para ayudar</p>
      </div>
    </div>

    <!-- Dashboard Content -->
    <div class="dashboard-container">
      <div class="stats-section">
        <!-- Stats Cards -->
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-content">
              <h3 class="stat-label">HORAS COMPLETADAS</h3>
              <div id="horas-completadas" class="stat-number">0</div>
              <p class="stat-period">Este mes</p>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-content">
              <h3 class="stat-label">ACTIVIDADES</h3>
              <div id="actividades-completadas" class="stat-number">0</div>
              <p class="stat-period">Participadas</p>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-content">
              <h3 class="stat-label">ORGANIZACIONES</h3>
              <div id="organizaciones-colaboradas" class="stat-number">0</div>
              <p class="stat-period">Colaboradas</p>
            </div>
          </div>
          
          <div class="stat-card">
            <div class="stat-content">
              <h3 class="stat-label">CERTIFICADOS</h3>
              <div id="certificados-obtenidos" class="stat-number">0</div>
              <p class="stat-period">Obtenidos</p>
            </div>
          </div>
        </div>

        <!-- Events Section -->
        <div class="events-section">
          <h2 class="section-title">Mis Eventos Inscritos</h2>
          
          <div id="inscribed-events-container">
            <!-- Estado de carga inicial -->
            <div id="events-loading-state" class="loading-state">
              <div class="loading-animation">
                <div class="loading-circle"></div>
                <div class="loading-circle"></div>
                <div class="loading-circle"></div>
              </div>
              <p>Cargando tus eventos inscritos...</p>
            </div>
          </div>
        </div>

        <!-- Navigation to Events -->
        <div class="navigation-section">
          <a href="/dashboard/all-events" class="cta-button">
            <span>Ver Todos los Eventos</span>
            <svg class="arrow-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </main>

  <!-- Modal de Logout -->
  <div id="logout-modal" class="modal-overlay">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Cerrar Sesión</h3>
      </div>
      <div class="modal-body">
        <p>¿Estás seguro de que deseas cerrar sesión?</p>
      </div>
      <div class="modal-footer">
        <button id="cancel-logout" class="btn-secondary">Cancelar</button>
        <button id="confirm-logout" class="btn-primary">Cerrar Sesión</button>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Navbar Styles */
  .navbar {
    position: fixed;
    top: 0;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(229, 231, 235, 0.3);
    z-index: 1000;
    padding: 0.75rem 0;
  }

  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 2rem;
  }

  .nav-logo h2 {
    margin: 0;
    color: #4f46e5;
    font-weight: 700;
    font-size: 1.25rem;
  }

  .nav-links {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  .nav-link {
    text-decoration: none;
    color: #6b7280;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    transition: all 0.3s ease;
  }

  .nav-link:hover {
    color: #4f46e5;
    background: rgba(79, 70, 229, 0.1);
  }

  .nav-link.active {
    color: #4f46e5;
    background: rgba(79, 70, 229, 0.1);
    font-weight: 600;
  }

  .logout-nav-btn {
    background: #ef4444;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .logout-nav-btn:hover {
    background: #dc2626;
    transform: translateY(-1px);
  }

  .main-content {
    margin-top: 70px; /* Espacio para el navbar fijo */
  }

  /* CSS styles here */
  .dashboard-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 3rem 0;
    position: relative;
    overflow: hidden;
  }
  
  .header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    text-align: center;
    position: relative;
    z-index: 1;
  }
  
  .main-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 2rem;
  }
  
  .dashboard-container {
    max-width: 1200px;
    margin: -2rem auto 0;
    padding: 0 2rem;
    position: relative;
    z-index: 2;
  }
  
  .stats-section {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    backdrop-filter: blur(10px);
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }
  
  .stat-card {
    background: rgba(248, 250, 252, 0.7);
    border-radius: 15px;
    padding: 2rem;
    text-align: center;
    border: 1px solid rgba(229, 231, 235, 0.5);
    transition: all 0.3s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
  }
  
  .stat-label {
    color: #6b7280;
    font-size: 0.875rem;
    font-weight: 600;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
  }
  
  .stat-number {
    font-size: 3rem;
    font-weight: 700;
    color: #4f46e5;
    margin-bottom: 0.25rem;
    line-height: 1;
  }
  
  .stat-period {
    color: #9ca3af;
    font-size: 0.875rem;
    margin: 0;
  }
  
  .events-section {
    margin-bottom: 3rem;
  }
  
  .section-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 1.5rem;
  }
  
  .loading-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    text-align: center;
  }
  
  .loading-animation {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .loading-circle {
    width: 0.5rem;
    height: 0.5rem;
    background: #4f46e5;
    border-radius: 50%;
    animation: bounce 1.4s infinite ease-in-out both;
  }
  
  .loading-circle:nth-child(1) { animation-delay: -0.32s; }
  .loading-circle:nth-child(2) { animation-delay: -0.16s; }
  
  @keyframes bounce {
    0%, 80%, 100% {
      transform: scale(0);
    }
    40% {
      transform: scale(1);
    }
  }
  
  .loading-state p {
    color: #6b7280;
    margin: 0;
  }
  
  .navigation-section {
    text-align: center;
  }
  
  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
    color: white;
    text-decoration: none;
    padding: 1rem 2rem;
    border-radius: 50px;
    font-weight: 600;
    font-size: 1.1rem;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3);
  }
  
  .cta-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 70, 229, 0.4);
  }
  
  .arrow-icon {
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.3s ease;
  }
  
  .cta-button:hover .arrow-icon {
    transform: translateX(4px);
  }
  
  @media (max-width: 768px) {
    .nav-container {
      padding: 0 1rem;
    }
    
    .nav-links {
      gap: 1rem;
    }
    
    .nav-logo h2 {
      font-size: 1rem;
    }
    
    .header-content {
      padding: 0 1rem;
    }
    
    .main-title {
      font-size: 2rem;
    }
    
    .dashboard-container {
      padding: 0 1rem;
      margin-top: -1rem;
    }
    
    .stats-section {
      padding: 1.5rem;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .stat-card {
      padding: 1.5rem;
    }
  }

  /* ===== MODAL STYLES ===== */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .modal-overlay.show,
  .modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .modal-content {
    background: white;
    border-radius: 1rem;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
    transform: translateY(-20px);
    transition: transform 0.3s ease;
  }

  .modal-overlay.show .modal-content {
    transform: translateY(0);
  }

  .modal-header {
    padding: 1.5rem 1.5rem 0;
  }

  .modal-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .modal-body {
    padding: 1rem 1.5rem;
  }

  .modal-body p {
    margin: 0;
    color: #6b7280;
    line-height: 1.5;
  }

  .modal-footer {
    padding: 0 1.5rem 1.5rem;
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
  }

  .btn-secondary,
  .btn-primary {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .btn-secondary {
    background: #e5e7eb;
    color: #374151;
  }

  .btn-secondary:hover {
    background: #d1d5db;
  }

  .btn-primary {
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    color: white;
    box-shadow: 0 2px 10px rgba(239, 68, 68, 0.3);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(239, 68, 68, 0.4);
  }
</style>

<script>
  console.log('🚀 DASHBOARD SCRIPT INICIADO');
  
  const API_BASE_URL = 'http://localhost:3001/api';
  let inscribedEvents: any[] = [];
  let userData: any = null;

  // Servicio para autenticación y headers
  const AuthService = {
    getAuthHeaders() {
      const token = localStorage.getItem('authToken');
      return {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
      };
    }
  };

  // Servicio para usuario
  const UserService = {
    async getProfile() {
      try {
        const response = await fetch(API_BASE_URL + '/auth/profile', {
          method: 'GET',
          headers: AuthService.getAuthHeaders()
        });
        return await response.json();
      } catch (error) {
        console.error('Error obteniendo perfil:', error);
        return { success: false, message: 'Error de conexión' };
      }
    }
  };

  // Servicio para eventos
  const EventsService = {
    async getInscribedEvents() {
      try {
        const response = await fetch(API_BASE_URL + '/eventos/my-inscribed', {
          method: 'GET',
          headers: AuthService.getAuthHeaders()
        });
        return await response.json();
      } catch (error) {
        console.error('Error:', error);
        return { success: false, message: 'Error de conexión' };
      }
    }
  };

  // Función principal
  async function loadInscribedEvents() {
    console.log('📅 Cargando eventos inscritos...');
    
    try {
      const response = await EventsService.getInscribedEvents();
      console.log('📦 Datos de eventos inscritos:', response);
      
      if (response.success && response.data) {
        inscribedEvents = response.data;
        renderEvents();
      } else {
        renderEvents();
      }
    } catch (error) {
      console.error('❌ Error:', error);
      renderEvents();
    }
  }

  function renderEvents() {
    console.log('🎨 Renderizando eventos...');
    
    // Remover loading
    const loading = document.getElementById('events-loading-state');
    if (loading) {
      loading.remove();
      console.log('✅ Loading removido');
    }
    
    // Obtener container
    const container = document.getElementById('inscribed-events-container');
    if (!container) {
      console.error('❌ Container no encontrado');
      return;
    }
    
    // Renderizar
    if (inscribedEvents.length === 0) {
      container.innerHTML = '<div style="text-align: center; padding: 2rem; color: #6b7280;"><h3>No hay eventos inscritos</h3><p>Explora nuestros eventos disponibles</p></div>';
    } else {
      let html = '';
      inscribedEvents.forEach(function(event) {
        // Determinar el estado del evento
        const eventStatus = getEventStatus(
          event.fechaInicio || event.fecha_inicio, 
          event.fechaFin || event.fecha_fin, 
          event.estado
        );
        const statusStyles = getStatusStyles(eventStatus.color);
        
        html += '<div style="background: white; border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px; margin-bottom: 16px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); position: relative;">';
        
        // Etiqueta de estado en la esquina superior derecha
        html += '<span style="' + statusStyles + '">' + eventStatus.status + '</span>';
        
        html += '<h3 style="margin: 0 0 8px 0; color: #1f2937; font-size: 18px; font-weight: 600; padding-right: 100px;">' + (event.titulo || 'Sin título') + '</h3>';
        
        // Descripción del evento
        if (event.descripcion) {
          html += '<p style="margin: 0 0 12px 0; color: #6b7280; font-size: 14px; line-height: 1.4; padding-right: 100px;">' + event.descripcion + '</p>';
        }
        
        // Organización con icono SVG
        html += '<div style="display: flex; align-items: center; margin-bottom: 8px;">';
        html += '<svg style="width: 16px; height: 16px; margin-right: 8px; color: #374151; flex-shrink: 0;" fill="currentColor" viewBox="0 0 20 20">';
        html += '<path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-6a1 1 0 00-1-1H9a1 1 0 00-1 1v6a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd"/>';
        html += '</svg>';
        html += '<p style="margin: 0; color: #4f46e5; font-size: 14px; font-weight: 500;">' + (event.organizacion_nombre || 'Sin organización') + '</p>';
        html += '</div>';
        
        // Ubicación con icono SVG
        html += '<div style="display: flex; align-items: center; margin-bottom: 8px;">';
        html += '<svg style="width: 16px; height: 16px; margin-right: 8px; color: #374151; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">';
        html += '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>';
        html += '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>';
        html += '</svg>';
        html += '<p style="margin: 0; color: #6b7280; font-size: 14px;">' + (event.ubicacion || 'Sin ubicación') + '</p>';
        html += '</div>';
        
        // Fechas y horarios con icono SVG
        if (event.fechaInicio || event.fecha_inicio) {
          const fechaInicio = new Date(event.fechaInicio || event.fecha_inicio);
          const fechaFin = event.fechaFin || event.fecha_fin ? new Date(event.fechaFin || event.fecha_fin) : null;
          
          // Formatear fechas
          const fechaInicioFormateada = fechaInicio.toLocaleDateString('es-ES', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
          });
          
          const fechaFinFormateada = fechaFin ? fechaFin.toLocaleDateString('es-ES', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
          }) : null;
          
          // Usar las horas que vienen del backend directamente
          const horaInicio = event.horaInicio || event.hora_inicio || '00:00';
          const horaFin = event.horaFin || event.hora_fin || null;
          
          html += '<div style="display: flex; align-items: center; margin-bottom: 8px;">';
          html += '<svg style="width: 16px; height: 16px; margin-right: 8px; color: #374151; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">';
          html += '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>';
          html += '</svg>';
          
          // Crear el texto de la fecha en una sola línea
          let fechaTexto = 'Inicio: ' + fechaInicioFormateada + ' a las ' + horaInicio;
          if (fechaFinFormateada && horaFin) {
            fechaTexto += ' • Fin: ' + fechaFinFormateada + ' a las ' + horaFin;
          }
          
          html += '<p style="margin: 0; color: #6b7280; font-size: 14px;">' + fechaTexto + '</p>';
          html += '</div>';
        }
        
        html += '</div>';
      });
      container.innerHTML = html;
    }
    
    console.log('✅ Eventos renderizados');
    
    // Actualizar estadísticas después de renderizar eventos
    updateStatistics();
  }

  // Función para determinar el estado del evento
  function getEventStatus(fechaInicio: any, fechaFin: any, estado: any) {
    const today = new Date();
    const startDate = new Date(fechaInicio);
    const endDate = new Date(fechaFin);
    
    // Si el evento está marcado como cancelado
    if (estado === 'cancelado') {
      return { status: 'Cancelado', color: 'red' };
    }
    
    // Determinar estado basado en fechas
    if (today < startDate) {
      return { status: 'Próximo', color: 'blue' };
    } else if (today >= startDate && today <= endDate) {
      return { status: 'En Curso', color: 'yellow' };
    } else if (today > endDate) {
      return { status: 'Completado', color: 'green' };
    } else {
      return { status: 'Próximo', color: 'blue' };
    }
  }

  // Función para obtener los estilos del badge de estado
  function getStatusStyles(color: any) {
    const baseStyles = 'padding: 0.25rem 0.75rem; border-radius: 999px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; position: absolute; top: 12px; right: 12px;';
    
    switch (color) {
      case 'yellow': // En Curso - Amarillo
        return baseStyles + ' background: #fef3c7; color: #92400e;';
      case 'blue': // Próximo - Azul
        return baseStyles + ' background: #dbeafe; color: #1e40af;';
      case 'green': // Completado - Verde
        return baseStyles + ' background: #dcfce7; color: #166534;';
      case 'red': // Cancelado - Rojo
        return baseStyles + ' background: #fee2e2; color: #991b1b;';
      default:
        return baseStyles + ' background: #f3f4f6; color: #374151;';
    }
  }

  // Función para cargar el perfil del usuario
  async function loadUserProfile() {
    console.log('👤 Cargando perfil del usuario...');
    
    try {
      const response = await UserService.getProfile();
      console.log('👤 Respuesta del perfil:', response);
      
      if (response.success && response.data) {
        userData = response.data;
        updateWelcomeMessage();
      } else {
        console.log('❌ Error cargando perfil:', response.message);
      }
    } catch (error) {
      console.error('❌ Error cargando perfil:', error);
    }
  }

  // Función para actualizar el mensaje de bienvenida
  function updateWelcomeMessage() {
    const welcomeTitle = document.getElementById('welcome-title');
    if (welcomeTitle && userData) {
      // Usar el nombre completo o el nombre de usuario
      const nombreMostrar = userData.nombre || userData.nombreCompleto || userData.username || 'Voluntario';
      welcomeTitle.textContent = 'Bienvenido, ' + nombreMostrar;
      console.log('✅ Mensaje de bienvenida actualizado:', nombreMostrar);
    }
  }

  // Función para calcular y actualizar las estadísticas
  function updateStatistics() {
    console.log('📊 Calculando estadísticas...');
    
    if (!inscribedEvents || inscribedEvents.length === 0) {
      console.log('📊 No hay eventos para calcular estadísticas');
      return;
    }

    // 1. ACTIVIDADES PARTICIPADAS - Contar eventos completados
    const actividadesCompletadas = inscribedEvents.filter(event => {
      const eventStatus = getEventStatus(
        event.fechaInicio || event.fecha_inicio, 
        event.fechaFin || event.fecha_fin, 
        event.estado
      );
      return eventStatus.color === 'green'; // Solo eventos completados
    }).length;

    // 2. ORGANIZACIONES COLABORADAS - Contar organizaciones únicas
    const organizacionesUnicas = new Set();
    inscribedEvents.forEach(event => {
      if (event.organizacion_nombre) {
        organizacionesUnicas.add(event.organizacion_nombre);
      }
    });
    const organizacionesColaboradas = organizacionesUnicas.size;

    // 3. CERTIFICADOS - Por ahora será igual a actividades completadas
    // (se puede ajustar cuando se implemente la lógica de certificados)
    const certificadosObtenidos = actividadesCompletadas;

    // 4. HORAS COMPLETADAS - Por ahora lo dejamos en 0 como placeholder
    const horasCompletadas = 0;

    // Actualizar los elementos en el DOM
    const horasElement = document.getElementById('horas-completadas');
    const actividadesElement = document.getElementById('actividades-completadas');
    const organizacionesElement = document.getElementById('organizaciones-colaboradas');
    const certificadosElement = document.getElementById('certificados-obtenidos');

    if (horasElement) horasElement.textContent = horasCompletadas.toString();
    if (actividadesElement) actividadesElement.textContent = actividadesCompletadas.toString();
    if (organizacionesElement) organizacionesElement.textContent = organizacionesColaboradas.toString();
    if (certificadosElement) certificadosElement.textContent = certificadosObtenidos.toString();

    console.log('📊 Estadísticas actualizadas:', {
      horas: horasCompletadas,
      actividades: actividadesCompletadas,
      organizaciones: organizacionesColaboradas,
      certificados: certificadosObtenidos
    });
  }

  // ===== FUNCIONES DE LOGOUT =====
  function showLogoutModal() {
    const modal = document.getElementById('logout-modal');
    if (modal) {
      modal.classList.add('show');
      document.body.style.overflow = 'hidden';
    }
  }

  function hideLogoutModal() {
    const modal = document.getElementById('logout-modal');
    if (modal) {
      modal.classList.remove('show');
      document.body.style.overflow = '';
    }
  }

  async function handleLogout() {
    try {
      const response = await fetch(API_BASE_URL + '/auth/logout', {
        method: 'POST',
        headers: AuthService.getAuthHeaders()
      });

      localStorage.removeItem('authToken');
      localStorage.removeItem('userType');
      window.location.href = '/login';
    } catch (error) {
      console.error('Error during logout:', error);
      localStorage.removeItem('authToken');
      localStorage.removeItem('userType');
      window.location.href = '/login';
    }
  }

  // Función de logout (mantenida para compatibilidad)
  function logout() {
    showLogoutModal();
  }

  // Inicializar
  document.addEventListener('DOMContentLoaded', function() {
    console.log('📄 DOM listo');
    
    // Configurar botón de logout y modal
    const logoutBtn = document.getElementById('logout-btn');
    const cancelLogout = document.getElementById('cancel-logout');
    const confirmLogout = document.getElementById('confirm-logout');
    const modal = document.getElementById('logout-modal');

    if (logoutBtn) {
      logoutBtn.addEventListener('click', showLogoutModal);
    }

    if (cancelLogout) {
      cancelLogout.addEventListener('click', hideLogoutModal);
    }

    if (confirmLogout) {
      confirmLogout.addEventListener('click', handleLogout);
    }

    if (modal) {
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          hideLogoutModal();
        }
      });
    }
    
    // Cargar datos del usuario y eventos
    loadUserProfile();
    loadInscribedEvents();
  });
</script>
